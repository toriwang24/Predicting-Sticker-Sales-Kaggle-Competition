{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":85723,"databundleVersionId":10652996,"sourceType":"competition"}],"dockerImageVersionId":30839,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-01-29T17:31:45.138489Z","iopub.execute_input":"2025-01-29T17:31:45.138776Z","iopub.status.idle":"2025-01-29T17:31:46.498345Z","shell.execute_reply.started":"2025-01-29T17:31:45.138749Z","shell.execute_reply":"2025-01-29T17:31:46.497033Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/playground-series-s5e1/sample_submission.csv\n/kaggle/input/playground-series-s5e1/train.csv\n/kaggle/input/playground-series-s5e1/test.csv\n","output_type":"stream"}],"execution_count":1},{"cell_type":"markdown","source":"## Methodology in predictions\nBased on the initial insights notebook, it seems that the only defining factor is the month, and one very rarely the day. Based on this I want to create models that use these factors.","metadata":{}},{"cell_type":"code","source":"#inputs\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nimport sklearn","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-29T17:31:46.499342Z","iopub.execute_input":"2025-01-29T17:31:46.499763Z","iopub.status.idle":"2025-01-29T17:31:48.341213Z","shell.execute_reply.started":"2025-01-29T17:31:46.499735Z","shell.execute_reply":"2025-01-29T17:31:48.339898Z"}},"outputs":[],"execution_count":2},{"cell_type":"code","source":"df_train = pd.read_csv('/kaggle/input/playground-series-s5e1/train.csv')\ndf_test = pd.read_csv('/kaggle/input/playground-series-s5e1/test.csv')\ndf_sub = pd.read_csv('/kaggle/input/playground-series-s5e1/sample_submission.csv')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-29T17:31:48.342574Z","iopub.execute_input":"2025-01-29T17:31:48.343282Z","iopub.status.idle":"2025-01-29T17:31:48.890760Z","shell.execute_reply.started":"2025-01-29T17:31:48.343235Z","shell.execute_reply":"2025-01-29T17:31:48.889597Z"}},"outputs":[],"execution_count":3},{"cell_type":"code","source":"## Trying random Tree\nimport pandas as pd\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeRegressor","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-29T17:31:48.892072Z","iopub.execute_input":"2025-01-29T17:31:48.892401Z","iopub.status.idle":"2025-01-29T17:31:49.383180Z","shell.execute_reply.started":"2025-01-29T17:31:48.892365Z","shell.execute_reply":"2025-01-29T17:31:49.382065Z"}},"outputs":[],"execution_count":4},{"cell_type":"code","source":"#Extract month, day, and year from date column\ndf_train['date'] = pd.to_datetime(df_train['date'])\n\n# Extract day, month, and year\ndf_train['day'] = df_train['date'].dt.day\ndf_train['month'] = df_train['date'].dt.month\ndf_train['year'] = df_train['date'].dt.year\n\n\n#Doing same processes on the test dataset\ndf_test['date'] = pd.to_datetime(df_test['date'])\ndf_test['day'] = df_test['date'].dt.day\ndf_test['month'] = df_test['date'].dt.month\ndf_test['year'] = df_test['date'].dt.year","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-29T17:38:06.397843Z","iopub.execute_input":"2025-01-29T17:38:06.398243Z","iopub.status.idle":"2025-01-29T17:38:06.559288Z","shell.execute_reply.started":"2025-01-29T17:38:06.398214Z","shell.execute_reply":"2025-01-29T17:38:06.558138Z"}},"outputs":[],"execution_count":16},{"cell_type":"code","source":"# Deal with NAN's\n# Replace NaN values with column means\ndf_train['num_sold'].fillna(df_train['num_sold'].mean(), inplace=True)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-29T17:37:08.138150Z","iopub.execute_input":"2025-01-29T17:37:08.138477Z","iopub.status.idle":"2025-01-29T17:37:08.145565Z","shell.execute_reply.started":"2025-01-29T17:37:08.138451Z","shell.execute_reply":"2025-01-29T17:37:08.144285Z"}},"outputs":[],"execution_count":14},{"cell_type":"code","source":"print(df_train.head())\nfeatures = ['day', 'month', 'year']\nX = df_train[features]\ny = df_train['num_sold']\n\ntrain_X, val_X, train_y, val_y = train_test_split(X, y, random_state=1)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-29T17:31:49.508892Z","iopub.execute_input":"2025-01-29T17:31:49.509322Z","iopub.status.idle":"2025-01-29T17:31:49.586495Z","shell.execute_reply.started":"2025-01-29T17:31:49.509278Z","shell.execute_reply":"2025-01-29T17:31:49.585260Z"}},"outputs":[{"name":"stdout","text":"   id       date country              store             product    num_sold  \\\n0   0 2010-01-01  Canada  Discount Stickers   Holographic Goose  752.527382   \n1   1 2010-01-01  Canada  Discount Stickers              Kaggle  973.000000   \n2   2 2010-01-01  Canada  Discount Stickers        Kaggle Tiers  906.000000   \n3   3 2010-01-01  Canada  Discount Stickers            Kerneler  423.000000   \n4   4 2010-01-01  Canada  Discount Stickers  Kerneler Dark Mode  491.000000   \n\n   day  month  year  \n0    1      1  2010  \n1    1      1  2010  \n2    1      1  2010  \n3    1      1  2010  \n4    1      1  2010  \n","output_type":"stream"}],"execution_count":7},{"cell_type":"code","source":"# Specify Model\nsticker_model = DecisionTreeRegressor(random_state=1)\n# Fit Model\nsticker_model.fit(train_X, train_y)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-29T17:31:49.587497Z","iopub.execute_input":"2025-01-29T17:31:49.587899Z","iopub.status.idle":"2025-01-29T17:31:49.780216Z","shell.execute_reply.started":"2025-01-29T17:31:49.587869Z","shell.execute_reply":"2025-01-29T17:31:49.779082Z"}},"outputs":[{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"DecisionTreeRegressor(random_state=1)","text/html":"<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>DecisionTreeRegressor(random_state=1)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">DecisionTreeRegressor</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeRegressor(random_state=1)</pre></div></div></div></div></div>"},"metadata":{}}],"execution_count":8},{"cell_type":"code","source":"val_predictions = sticker_model.predict(val_X)\nval_mae = mean_absolute_error(val_predictions, val_y)\nprint(\"Validation MAE when not specifying max_leaf_nodes: {:,.0f}\".format(val_mae))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-29T17:31:49.781383Z","iopub.execute_input":"2025-01-29T17:31:49.781904Z","iopub.status.idle":"2025-01-29T17:31:49.808840Z","shell.execute_reply.started":"2025-01-29T17:31:49.781846Z","shell.execute_reply":"2025-01-29T17:31:49.807663Z"}},"outputs":[{"name":"stdout","text":"Validation MAE when not specifying max_leaf_nodes: 516\n","output_type":"stream"}],"execution_count":9},{"cell_type":"code","source":"sticker_model = DecisionTreeRegressor(max_leaf_nodes=100, random_state=1)\nsticker_model.fit(train_X, train_y)\nval_predictions = sticker_model.predict(val_X)\nval_mae = mean_absolute_error(val_predictions, val_y)\nprint(\"Validation MAE for best value of max_leaf_nodes: {:,.0f}\".format(val_mae))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-29T17:31:49.810207Z","iopub.execute_input":"2025-01-29T17:31:49.810612Z","iopub.status.idle":"2025-01-29T17:31:49.975343Z","shell.execute_reply.started":"2025-01-29T17:31:49.810572Z","shell.execute_reply":"2025-01-29T17:31:49.974066Z"}},"outputs":[{"name":"stdout","text":"Validation MAE for best value of max_leaf_nodes: 511\n","output_type":"stream"}],"execution_count":10},{"cell_type":"code","source":"sklearn.metrics.mean_absolute_percentage_error(val_y, val_predictions)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-29T17:31:49.976355Z","iopub.execute_input":"2025-01-29T17:31:49.976644Z","iopub.status.idle":"2025-01-29T17:31:49.993279Z","shell.execute_reply.started":"2025-01-29T17:31:49.976619Z","shell.execute_reply":"2025-01-29T17:31:49.992059Z"}},"outputs":[{"execution_count":11,"output_type":"execute_result","data":{"text/plain":"8.724063189745314"},"metadata":{}}],"execution_count":11},{"cell_type":"code","source":"df_test.head","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-29T17:38:28.736269Z","iopub.execute_input":"2025-01-29T17:38:28.736607Z","iopub.status.idle":"2025-01-29T17:38:28.747682Z","shell.execute_reply.started":"2025-01-29T17:38:28.736582Z","shell.execute_reply":"2025-01-29T17:38:28.746317Z"}},"outputs":[{"execution_count":18,"output_type":"execute_result","data":{"text/plain":"<bound method NDFrame.head of            id       date    country                 store             product  \\\n0      230130 2017-01-01     Canada     Discount Stickers   Holographic Goose   \n1      230131 2017-01-01     Canada     Discount Stickers              Kaggle   \n2      230132 2017-01-01     Canada     Discount Stickers        Kaggle Tiers   \n3      230133 2017-01-01     Canada     Discount Stickers            Kerneler   \n4      230134 2017-01-01     Canada     Discount Stickers  Kerneler Dark Mode   \n...       ...        ...        ...                   ...                 ...   \n98545  328675 2019-12-31  Singapore  Premium Sticker Mart   Holographic Goose   \n98546  328676 2019-12-31  Singapore  Premium Sticker Mart              Kaggle   \n98547  328677 2019-12-31  Singapore  Premium Sticker Mart        Kaggle Tiers   \n98548  328678 2019-12-31  Singapore  Premium Sticker Mart            Kerneler   \n98549  328679 2019-12-31  Singapore  Premium Sticker Mart  Kerneler Dark Mode   \n\n       day  month  year  \n0        1      1  2017  \n1        1      1  2017  \n2        1      1  2017  \n3        1      1  2017  \n4        1      1  2017  \n...    ...    ...   ...  \n98545   31     12  2019  \n98546   31     12  2019  \n98547   31     12  2019  \n98548   31     12  2019  \n98549   31     12  2019  \n\n[98550 rows x 8 columns]>"},"metadata":{}}],"execution_count":18},{"cell_type":"code","source":"test_x = df_test[features]\npred = sticker_model.predict(test_x)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-29T17:39:33.422685Z","iopub.execute_input":"2025-01-29T17:39:33.423119Z","iopub.status.idle":"2025-01-29T17:39:33.434807Z","shell.execute_reply.started":"2025-01-29T17:39:33.423084Z","shell.execute_reply":"2025-01-29T17:39:33.433587Z"}},"outputs":[],"execution_count":19},{"cell_type":"code","source":"#import pandas as pd\n#test = pd.read_csv(\"test.csv\")\ndf_test[\"num_sold\"] = pred\ndf_test[[\"id\",\"num_sold\"]].to_csv(\"submission.csv\",index=False)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-29T17:39:35.440325Z","iopub.execute_input":"2025-01-29T17:39:35.440650Z","iopub.status.idle":"2025-01-29T17:39:35.664550Z","shell.execute_reply.started":"2025-01-29T17:39:35.440625Z","shell.execute_reply":"2025-01-29T17:39:35.663257Z"}},"outputs":[],"execution_count":20},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}